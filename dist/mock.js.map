{"version":3,"file":"mock.js","sources":["../mock/index.js"],"sourcesContent":["import * as di from \"ng-di\";\r\nimport { utils } from \"ng-di\";\r\n\r\n/*\r\nangular.js 1.6.10\r\n*/\r\n\r\nconst GLOBAL = typeof globalThis !== 'undefined' ? globalThis :\r\n  typeof global !== 'undefined' ? global :\r\n  typeof window !== 'window' ? window :\r\n  null;\r\n\r\nconst jasmineOrMocha = GLOBAL.jasmine || GLOBAL.mocha;\r\n// if (!jasmineOrMocha) {\r\n//   return;\r\n// }\r\n\r\n\r\nvar currentSpec = null,\r\n    injectorState = new InjectorState(),\r\n    annotatedFunctions = [],\r\n    wasInjectorCreated = function() {\r\n      return !!currentSpec;\r\n    };\r\n\r\nconst $$annotateOriginal = di.injector.$$annotate;\r\ndi.injector.$$annotate = function(fn) {\r\n  if (typeof fn === 'function' && !fn.$inject) {\r\n    annotatedFunctions.push(fn);\r\n  }\r\n  return mock.$$annotate.apply(this, arguments);\r\n};\r\n\r\n/**\r\n * @ngdoc function\r\n * @name angular.mock.module\r\n * @description\r\n *\r\n * *NOTE*: This function is also published on window for easy access.<br>\r\n * *NOTE*: This function is declared ONLY WHEN running tests with jasmine or mocha\r\n *\r\n * This function registers a module configuration code. It collects the configuration information\r\n * which will be used when the injector is created by {@link angular.mock.inject inject}.\r\n *\r\n * See {@link angular.mock.inject inject} for usage example\r\n *\r\n * @param {...(string|Function|Object)} fns any number of modules which are represented as string\r\n *        aliases or as anonymous module initialization functions. The modules are used to\r\n *        configure the injector. The 'ng' and 'ngMock' modules are automatically loaded. If an\r\n *        object literal is passed each key-value pair will be registered on the module via\r\n *        {@link auto.$provide $provide}.value, the key being the string name (or token) to associate\r\n *        with the value on the injector.\r\n */\r\nvar module = function() {\r\n  var moduleFns = Array.prototype.slice.call(arguments, 0);\r\n  return wasInjectorCreated() ? workFn() : workFn;\r\n  /////////////////////\r\n  function workFn() {\r\n    if (currentSpec.$injector) {\r\n      throw new Error('Injector already created, can not register a module!');\r\n    } else {\r\n      var fn, modules = currentSpec.$modules || (currentSpec.$modules = []);\r\n      utils.forEach(moduleFns, function(module) {\r\n        if (utils.isObject(module) && !utils.isArray(module)) {\r\n          fn = ['$provide', function($provide) {\r\n            utils.forEach(module, function(value, key) {\r\n              $provide.value(key, value);\r\n            });\r\n          }];\r\n        } else {\r\n          fn = module;\r\n        }\r\n        if (currentSpec.$providerInjector) {\r\n          currentSpec.$providerInjector.invoke(fn);\r\n        } else {\r\n          modules.push(fn);\r\n        }\r\n      });\r\n    }\r\n  }\r\n};\r\n\r\nmodule.$$beforeAllHook = (GLOBAL.before || GLOBAL.beforeAll);\r\nmodule.$$afterAllHook = (GLOBAL.after || GLOBAL.afterAll);\r\n\r\n// purely for testing ngMock itself\r\nmodule.$$currentSpec = function(to) {\r\n  if (arguments.length === 0) return to;\r\n  currentSpec = to;\r\n};\r\n\r\n/**\r\n * @ngdoc function\r\n * @name angular.mock.module.sharedInjector\r\n * @description\r\n *\r\n * *NOTE*: This function is declared ONLY WHEN running tests with jasmine or mocha\r\n *\r\n * This function ensures a single injector will be used for all tests in a given describe context.\r\n * This contrasts with the default behaviour where a new injector is created per test case.\r\n *\r\n * Use sharedInjector when you want to take advantage of Jasmine's `beforeAll()`, or mocha's\r\n * `before()` methods. Call `module.sharedInjector()` before you setup any other hooks that\r\n * will create (i.e call `module()`) or use (i.e call `inject()`) the injector.\r\n *\r\n * You cannot call `sharedInjector()` from within a context already using `sharedInjector()`.\r\n *\r\n * ## Example\r\n *\r\n * Typically beforeAll is used to make many assertions about a single operation. This can\r\n * cut down test run-time as the test setup doesn't need to be re-run, and enabling focussed\r\n * tests each with a single assertion.\r\n *\r\n * ```js\r\n * describe(\"Deep Thought\", function() {\r\n *\r\n *   module.sharedInjector();\r\n *\r\n *   beforeAll(module(\"UltimateQuestion\"));\r\n *\r\n *   beforeAll(inject(function(DeepThought) {\r\n *     expect(DeepThought.answer).toBeUndefined();\r\n *     DeepThought.generateAnswer();\r\n *   }));\r\n *\r\n *   it(\"has calculated the answer correctly\", inject(function(DeepThought) {\r\n *     // Because of sharedInjector, we have access to the instance of the DeepThought service\r\n *     // that was provided to the beforeAll() hook. Therefore we can test the generated answer\r\n *     expect(DeepThought.answer).toBe(42);\r\n *   }));\r\n *\r\n *   it(\"has calculated the answer within the expected time\", inject(function(DeepThought) {\r\n *     expect(DeepThought.runTimeMillennia).toBeLessThan(8000);\r\n *   }));\r\n *\r\n *   it(\"has double checked the answer\", inject(function(DeepThought) {\r\n *     expect(DeepThought.absolutelySureItIsTheRightAnswer).toBe(true);\r\n *   }));\r\n *\r\n * });\r\n *\r\n * ```\r\n */\r\nmodule.sharedInjector = function() {\r\n  if (!(module.$$beforeAllHook && module.$$afterAllHook)) {\r\n    throw Error('sharedInjector() cannot be used unless your test runner defines beforeAll/afterAll');\r\n  }\r\n\r\n  var initialized = false;\r\n\r\n  module.$$beforeAllHook(/** @this */ function() {\r\n    if (injectorState.shared) {\r\n      injectorState.sharedError = Error('sharedInjector() cannot be called inside a context that has already called sharedInjector()');\r\n      throw injectorState.sharedError;\r\n    }\r\n    initialized = true;\r\n    currentSpec = this;\r\n    injectorState.shared = true;\r\n  });\r\n\r\n  module.$$afterAllHook(function() {\r\n    if (initialized) {\r\n      injectorState = new InjectorState();\r\n      module.$$cleanup();\r\n    } else {\r\n      injectorState.sharedError = null;\r\n    }\r\n  });\r\n};\r\n\r\nmodule.$$beforeEach = function() {\r\n  if (injectorState.shared && currentSpec && currentSpec !== this) {\r\n    var state = currentSpec;\r\n    currentSpec = this;\r\n    utils.forEach(['$injector','$modules','$providerInjector', '$injectorStrict'], function(k) {\r\n      currentSpec[k] = state[k];\r\n      state[k] = null;\r\n    });\r\n  } else {\r\n    currentSpec = this;\r\n    annotatedFunctions = [];\r\n  }\r\n};\r\n\r\nmodule.$$afterEach = function() {\r\n  if (injectorState.cleanupAfterEach()) {\r\n    module.$$cleanup();\r\n  }\r\n};\r\n\r\nmodule.$$cleanup = function() {\r\n  var injector = currentSpec.$injector;\r\n\r\n  annotatedFunctions.forEach(function(fn) {\r\n    delete fn.$inject;\r\n  });\r\n\r\n  currentSpec.$injector = null;\r\n  currentSpec.$modules = null;\r\n  currentSpec.$providerInjector = null;\r\n  currentSpec = null;\r\n};\r\n\r\n(GLOBAL.beforeEach || GLOBAL.setup)(module.$$beforeEach);\r\n(GLOBAL.afterEach || GLOBAL.teardown)(module.$$afterEach);\r\n\r\n/**\r\n * @ngdoc function\r\n * @name angular.mock.inject\r\n * @description\r\n *\r\n * *NOTE*: This function is also published on window for easy access.<br>\r\n * *NOTE*: This function is declared ONLY WHEN running tests with jasmine or mocha\r\n *\r\n * The inject function wraps a function into an injectable function. The inject() creates new\r\n * instance of {@link auto.$injector $injector} per test, which is then used for\r\n * resolving references.\r\n *\r\n *\r\n * ## Resolving References (Underscore Wrapping)\r\n * Often, we would like to inject a reference once, in a `beforeEach()` block and reuse this\r\n * in multiple `it()` clauses. To be able to do this we must assign the reference to a variable\r\n * that is declared in the scope of the `describe()` block. Since we would, most likely, want\r\n * the variable to have the same name of the reference we have a problem, since the parameter\r\n * to the `inject()` function would hide the outer variable.\r\n *\r\n * To help with this, the injected parameters can, optionally, be enclosed with underscores.\r\n * These are ignored by the injector when the reference name is resolved.\r\n *\r\n * For example, the parameter `_myService_` would be resolved as the reference `myService`.\r\n * Since it is available in the function body as `_myService_`, we can then assign it to a variable\r\n * defined in an outer scope.\r\n *\r\n * ```\r\n * // Defined out reference variable outside\r\n * var myService;\r\n *\r\n * // Wrap the parameter in underscores\r\n * beforeEach( inject( function(_myService_){\r\n *   myService = _myService_;\r\n * }));\r\n *\r\n * // Use myService in a series of tests.\r\n * it('makes use of myService', function() {\r\n *   myService.doStuff();\r\n * });\r\n *\r\n * ```\r\n *\r\n * See also {@link angular.mock.module angular.mock.module}\r\n *\r\n * ## Example\r\n * Example of what a typical jasmine tests looks like with the inject method.\r\n * ```js\r\n *\r\n *   angular.module('myApplicationModule', [])\r\n *       .value('mode', 'app')\r\n *       .value('version', 'v1.0.1');\r\n *\r\n *\r\n *   describe('MyApp', function() {\r\n *\r\n *     // You need to load modules that you want to test,\r\n *     // it loads only the \"ng\" module by default.\r\n *     beforeEach(module('myApplicationModule'));\r\n *\r\n *\r\n *     // inject() is used to inject arguments of all given functions\r\n *     it('should provide a version', inject(function(mode, version) {\r\n *       expect(version).toEqual('v1.0.1');\r\n *       expect(mode).toEqual('app');\r\n *     }));\r\n *\r\n *\r\n *     // The inject and module method can also be used inside of the it or beforeEach\r\n *     it('should override a version and test the new version is injected', function() {\r\n *       // module() takes functions or strings (module aliases)\r\n *       module(function($provide) {\r\n *         $provide.value('version', 'overridden'); // override version here\r\n *       });\r\n *\r\n *       inject(function(version) {\r\n *         expect(version).toEqual('overridden');\r\n *       });\r\n *     });\r\n *   });\r\n *\r\n * ```\r\n *\r\n * @param {...Function} fns any number of functions which will be injected using the injector.\r\n */\r\n\r\n\r\n\r\nvar ErrorAddingDeclarationLocationStack = function ErrorAddingDeclarationLocationStack(e, errorForStack) {\r\n  this.message = e.message;\r\n  this.name = e.name;\r\n  if (e.line) this.line = e.line;\r\n  if (e.sourceId) this.sourceId = e.sourceId;\r\n  if (e.stack && errorForStack)\r\n    this.stack = e.stack + '\\n' + errorForStack.stack;\r\n  if (e.stackArray) this.stackArray = e.stackArray;\r\n};\r\nErrorAddingDeclarationLocationStack.prototype = Error.prototype;\r\n\r\nconst inject = function() {\r\n  var blockFns = Array.prototype.slice.call(arguments, 0);\r\n  var errorForStack = new Error('Declaration Location');\r\n  // IE10+ and PhanthomJS do not set stack trace information, until the error is thrown\r\n  if (!errorForStack.stack) {\r\n    try {\r\n      throw errorForStack;\r\n    } catch (e) { /* empty */ }\r\n  }\r\n  return wasInjectorCreated() ? WorkFn.call(currentSpec) : WorkFn;\r\n  /////////////////////\r\n  function WorkFn() {\r\n    var modules = currentSpec.$modules || [];\r\n    var strictDi = !!currentSpec.$injectorStrict;\r\n    modules.unshift(['$injector', function($injector) {\r\n      currentSpec.$providerInjector = $injector;\r\n    }]);\r\n    // modules.unshift('ngMock');\r\n    // modules.unshift('ng');\r\n    var injector = currentSpec.$injector;\r\n    if (!injector) {\r\n      if (strictDi) {\r\n        // If strictDi is enabled, annotate the providerInjector blocks\r\n        utils.forEach(modules, function(moduleFn) {\r\n          if (typeof moduleFn === 'function') {\r\n            di.injector.$$annotate(moduleFn);\r\n          }\r\n        });\r\n      }\r\n      injector = currentSpec.$injector = di.injector(modules, strictDi);\r\n      currentSpec.$injectorStrict = strictDi;\r\n    }\r\n    for (var i = 0, ii = blockFns.length; i < ii; i++) {\r\n      if (currentSpec.$injectorStrict) {\r\n        // If the injector is strict / strictDi, and the spec wants to inject using automatic\r\n        // annotation, then annotate the function here.\r\n        injector.annotate(blockFns[i]);\r\n      }\r\n      try {\r\n        injector.invoke(blockFns[i] || utils.noop, this);\r\n      } catch (e) {\r\n        if (e.stack && errorForStack) {\r\n          throw new ErrorAddingDeclarationLocationStack(e, errorForStack);\r\n        }\r\n        throw e;\r\n      } finally {\r\n        errorForStack = null;\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\n\r\ninject.strictDi = function(value) {\r\n  value = arguments.length ? !!value : true;\r\n  return wasInjectorCreated() ? workFn() : workFn;\r\n\r\n  function workFn() {\r\n    if (value !== currentSpec.$injectorStrict) {\r\n      if (currentSpec.$injector) {\r\n        throw new Error('Injector already created, can not modify strict annotations');\r\n      } else {\r\n        currentSpec.$injectorStrict = value;\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nfunction InjectorState() {\r\n  this.shared = false;\r\n  this.sharedError = null;\r\n\r\n  this.cleanupAfterEach = function() {\r\n    return !this.shared || this.sharedError;\r\n  };\r\n}\r\n\r\n\r\nconst mock = {\r\n  $$annotate: $$annotateOriginal,\r\n  module,\r\n  inject,\r\n};\r\nexport default mock;\r\n"],"names":["di.injector","utils"],"mappings":"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"}